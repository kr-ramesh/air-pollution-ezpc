uint32 dim = 4;

def void check1(bool_bl[dim] x2, int32_bl threshold)
{
  bool_bl result;
  int32_bl count=0;
  for i=[0:dim]
  {
    count = count + ((x2[i]) ? 1 : 0); 
  };
  result=count>threshold;
}

def void max(int32_bl[dim] x1, bool_bl[dim] x2) 
{
  int32_bl resultfinal=0;
  for i=[0:dim]
  {
    resultfinal= ((x2[i]) ? ((x1[i]>resultfinal) ? x1[i] : resultfinal )  : resultfinal);
  };
}

def void main ()
{
  input(SERVER, grid1, int32_bl[dim]);
  input(SERVER, bool1, bool_bl[dim]);
  input(SERVER, randnum, int32_bl);

  input(CLIENT, grid2, int32_bl[dim]);
  input(CLIENT, bool2, bool_bl[dim]);

  (*int32_bl[dim] grid1;
  int32_bl[dim] grid2;
  bool_bl[dim] bool1;
  bool_bl[dim] bool2;
  int32_bl randnum;*)
  int32_bl[dim] grid;
  
  for i=[0:dim]
  {
    grid[i]=grid1[i]+grid2[i];
  };

  bool_bl[dim] clientbool;

  int32_bl thres= 2;
  
  for i=[0:dim]
  {
    clientbool[i]=bool1[i]@bool2[i];
  };
  
  int32_bl result;
  bool_bl firstcheck;

  check1(clientbool, thres);
    
  max(grid, clientbool);
  
  output(CLIENT, result-randnum);
}

