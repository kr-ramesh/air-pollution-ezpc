program.use_edabit(True)
def test(actual):
    # you can reveal a number in order to print it
    actual = actual.reveal()
    print_ln('Got %s', actual)

def check1(x1, thres):
    count=0
    result=False
    for i in range(dim):
        count+=x1[i].if_else(1, 0)
    return count>thres

def max(x1, x2, ischeck):
    resultfinal=x1[0];
    for i in range(1, dim):
        resultfinal= x2[i].if_else((x1[i]>resultfinal).if_else(x1[i], resultfinal), resultfinal)
    return resultfinal

dim=270
thres=2
       
grid1 = Array(dim, sint)
grid2 = Array(dim, sint)
bool1 = Array(dim, sint)
bool2 = Array(dim, sint)

@for_range_opt(dim)
def _(i):
    grid1[i] = sbitint.get_type(16).get_input_from(0)
    grid2[i] = sbitint.get_type(16).get_input_from(1)

@for_range_opt(dim)
def _(i):
    bool1[i] = sbitint.get_type(16).get_input_from(0)
    bool2[i] = sbitint.get_type(16).get_input_from(1)

grid = Array(dim, sint)
clientbool = Array(dim, sint)

for i in range(dim):
    grid[i]=grid1[i]+grid2[i]
    clientbool[i]= bool1[i].bit_xor(bool2[i])

firstcheck=check1(clientbool, thres)
finalresult=max(grid, clientbool, firstcheck)